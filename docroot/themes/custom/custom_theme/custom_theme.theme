<?php

use Drupal\image\Entity\ImageStyle;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Implements hook_preprocess_html().
 */
function custom_theme_preprocess_html(array &$variables) {
  $banner_entity = null;

  // Node
  if ($nid = \Drupal::routeMatch()->getRawParameter('node')) {
  $banner_entity = Node::load($nid);
  }

  // User
  elseif ($uid = \Drupal::routeMatch()->getRawParameter('user')) {
    $banner_entity = User::load($uid);
  }

  // Taxonomy term
  elseif ($tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $banner_entity = Term::load($tid);
  }

  if ($banner_entity != null) {

    // Show banner
    if ($banner_entity->field_use_banner && !$banner_entity->field_use_banner->isEmpty()) {

      if ($field_use_banner = $banner_entity->get('field_use_banner')->getValue()) {

        if ((boolean) $field_use_banner[0]['value']) {

          // Type
          if ($banner_entity->field_banner_type && !$banner_entity->field_banner_type->isEmpty()) {

            if ($field_types = $banner_entity->get('field_banner_type')->getValue()) {
              $type = $field_types[0]['value'];

              if ($type === 'large') {
                $variables['attributes']['class'][] = 'has-large-banner';
              }
            }
          }

          // Text color
          if ($banner_entity->field_banner_text_color && !$banner_entity->field_banner_text_color->isEmpty()) {

            if ($field_text_color = $banner_entity->get('field_banner_text_color')->getValue()) {
              $variables['attributes']['class'][] = 'banner-has-text-color-' . $field_text_color[0]['value'];
            }
          }

          // Pull content up
          if ($banner_entity->field_banner_pull_content_up && !$banner_entity->field_banner_pull_content_up->isEmpty()) {

            if ($field_pull_content_up = $banner_entity->get('field_banner_pull_content_up')->getValue()) {

              if ((boolean) $field_pull_content_up[0]['value']) {
                $variables['attributes']['class'][] = 'banner-pull-content-up';
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function custom_theme_preprocess_page(array &$variables) {
  $banner_entity = null;
  $banner = [];

  // Node
  if (isset($variables['node'])) {
    $banner_entity = $variables['node'];
  }

  // User
  elseif ($uid = \Drupal::routeMatch()->getRawParameter('user')) {
    $banner_entity = User::load($uid);
  }

  // Taxonomy term
  elseif ($tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $banner_entity = Term::load($tid);
  }

  if ($banner_entity != null) {

    // Show banner
    if ($banner_entity->field_use_banner && !$banner_entity->field_use_banner->isEmpty()) {

      if ($field_use_banner = $banner_entity->get('field_use_banner')->getValue()) {

        if ((boolean) $field_use_banner[0]['value']) {

          // Type
          if ($banner_entity->field_banner_type && !$banner_entity->field_banner_type->isEmpty()) {

            if ($field_types = $banner_entity->get('field_banner_type')->getValue()) {
              $type = $variables['banner']['type'] = $field_types[0]['value'];

              // Background image
              if ($banner_entity->field_banner_background_image && !$banner_entity->field_banner_background_image->isEmpty()) {
                $image_uri   = $banner_entity->field_banner_background_image->entity->getFileUri();
                $image_style = ImageStyle::load('banner_background_image__' . $type);
                $image_url   = $image_style->buildUrl($image_uri);

                $variables['banner']['background_image'] = $image_url;
              }
            }
          }

          // Text color
          if ($banner_entity->field_banner_text_color && !$banner_entity->field_banner_text_color->isEmpty()) {

            if ($field_text_color = $banner_entity->get('field_banner_text_color')->getValue()) {
              $variables['banner']['text_color'] = $field_text_color[0]['value'];
            }
          }

          // Heading
          if ($banner_entity->field_banner_heading && !$banner_entity->field_banner_heading->isEmpty()) {

            if ($field_headings = $banner_entity->get('field_banner_heading')->getValue()) {
              $variables['banner']['field_banner_heading'] = $field_headings[0]['value'];
            }
          }

          // Body
          if ($banner_entity->field_banner_body && !$banner_entity->field_banner_body->isEmpty()) {

            if ($field_body = $banner_entity->get('field_banner_body')->getValue()) {
              $variables['banner']['field_banner_body'] = $field_body[0]['value'];
            }
          }
        }
      }
    }
  }
}

/*
 * Implements hook_preprocess_paragraph().
 */
function custom_theme_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  // Background color
  if ($paragraph->field_background_color && !$paragraph->field_background_color->isEmpty()) {

    if ($fields_target_ids = $paragraph->get('field_background_color')->getValue()) {

      if (isset($fields_target_ids[0]['target_id']) && $tid = $fields_target_ids[0]['target_id']) {
        $taxonomy_term = Term::load($tid);

        if ($fields_background_color = $taxonomy_term->get('field_machine_name')->getValue()) {
          $variables['attributes']['class'][] = 'boxy--background-color-' . $fields_background_color[0]['value'];
        }
      }
    }
  }

  // Background image
  if ($paragraph->field_background_image && !$paragraph->field_background_image->isEmpty()) {
    $image_uri   = $paragraph->field_background_image->entity->getFileUri();
    $image_style = ImageStyle::load('paragraph_action_box');
    $image_url   = $image_style->buildUrl($image_uri);

    $variables['background_image'] = $image_url;
  }
}

/*
 * Implements hook_preprocess_paragraph().
 * For section paragraphs.
 */
function custom_theme_preprocess_paragraph__section(&$variables) {
  $paragraph = $variables['paragraph'];
}

/*
 * Implements hook_preprocess_paragraph().
 * For media paragraphs.
 */
function custom_theme_preprocess_paragraph__media(&$variables) {
  $paragraph = $variables['paragraph'];

  if ($fields = $paragraph->get('field_position_of_media')->getValue()) {

    if (isset($fields[0]) && $fields[0]['value'] === 'right') {
      $variables['attributes']['class'][] = 'paragraph--reverse';
    }
  }

  if ($paragraph->field_media && !$paragraph->field_media->isEmpty()) {
    $image_uri   = $paragraph->field_media->entity->getFileUri();
    $image_style = ImageStyle::load('paragraph_media');
    $image_url   = $image_style->buildUrl($image_uri);

    $variables['background_image'] = $image_url;
  }
}

/*
 * Implements hook_preprocess_paragraph().
 * For action box paragraphs.
 */
function custom_theme_preprocess_paragraph__action_box(&$variables) {
  $paragraph = $variables['paragraph'];

  if ($fields = $paragraph->get('field_text_color')->getValue()) {

    if (isset($fields[0]['value'])) {
      $variables['attributes']['class'][] = 'paragraph--text-color-' . $fields[0]['value'];
    }
  }
}

/*
 * Implements hook_preprocess_paragraph().
 * For action box paragraphs.
 */
function custom_theme_preprocess_paragraph__list_of_employees(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_departments')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }

    $contextual_filter = implode('+', $ids);

    $variables['content']['embedded_view'] = views_embed_view('employees', 'embed_teaser', $contextual_filter);
  }
  else {
    $variables['content']['embedded_view'] = views_embed_view('employees', 'embed_teaser');
  }
}
